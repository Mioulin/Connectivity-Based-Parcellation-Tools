"""Main Snakefile"""

import os

configfile: 'project.yaml'

participants = config['participants']
k = config['parameters']['clustering']['n_clusters']
ext = config['parameters']['summary']['figure_format']

# Generate desired 'rule all' input
rule_all_input = list()
rule_all_input.append(expand('clustering/clustering_group_k{k}.npz', k=k))
rule_all_input.append(expand('summary/niftis/group_clustering_k{k}.nii', k=k))
rule_all_input.append(expand('summary/individual_similarity_{k}_clusters.npy', k=k))
rule_all_input.append(expand('summary/figures/individual_similarity_{k}clusters_unordered.{ext}', k=k, ext=ext))
rule_all_input.append(expand('summary/figures/individual_similarity_{k}clusters_ordered.{ext}', k=k, ext=ext))
rule_all_input.append('summary/group_similarity.tsv')
rule_all_input.append('summary/cophenetic_correlation.tsv')
rule_all_input.append('summary/figures/group_similarity.{ext}'.format(ext=ext))
rule_all_input.append('summary/figures/relabel_accuracy.{ext}'.format(ext=ext))
rule_all_input.append('summary/figures/cophenetic_correlation.{ext}'.format(ext=ext))

if config['parameters']['clustering']['internal_validity_metrics']:
    rule_all_input.append('summary/internal_validity.tsv')
    rule_all_input.append('summary/figures/internal_validity.{ext}'.format(ext=ext))


rule all:
    input: rule_all_input


if config['project']['modality'] == 'fmri':
    rule connectivity:
        input:
            seed = 'seed_mask.nii',
            target = 'target_mask.nii',
            time_series = config['dataset']['time_series']
        output: 'connectivity/connectivity_{participant_id}.npy'
        threads: 1
        resources: mem_mb=10000, io=5
        params:
            modality = config['project']['modality'],
            confounds_file = config['dataset'].get('confounds', None),
            confounds_usecols = config['parameters']['connectivity'].get('confounds', None),
            smoothing_fwhm = config['parameters']['connectivity'].get('smoothing_fwhm', False),
            high_pass = config['parameters']['connectivity'].get('high_pass', None),
            low_pass = config['parameters']['connectivity'].get('low_pass', None),
            tr = config['parameters']['connectivity'].get('tr', None),
            arctanh_transform = config['parameters']['connectivity'].get('arctanh_transform', False),
            seed_low_variance = config['parameters']['connectivity'].get('seed_low_variance_threshold', 0.05),
            target_low_variance = config['parameters']['connectivity'].get('target_low_variance_threshold', 0.1),
            pca_transform = config['parameters']['connectivity'].get('pca_transform', False),
            log = '%s/connectivity/connectivity_{participant_id}.tsv' % os.getcwd()
        script: 'scripts/01_connectivity.py'

elif config['project']['modality'] == 'dmri':
    rule connectivity:
        input:
            seed = 'highres_seed_mask.nii',
            target = 'target_mask.nii',
            bet_binary_mask = config['dataset']['bet_binary_mask'],
            xfm = config['dataset']['xfm'],
            inv_xfm = config['dataset']['inv_xfm']
        output: 'connectivity/connectivity_{participant_id}.npy'
        threads: 1
        resources: mem_mb=10000, io=5
        params:
            modality = config['project']['modality'],
            samples = config['dataset']['samples'],
            tmp_dir = '%s/probtrackx2_{participant_id}' % os.getcwd(),
            pd = config['parameters']['connectivity'].get('correct_path_distribution'),
            n_samples = config['parameters']['connectivity'].get('n_samples'),
            n_steps = config['parameters']['connectivity'].get('n_steps'),
            step_length = config['parameters']['connectivity'].get('step_length'),
            dist_thresh = config['parameters']['connectivity'].get('dist_thresh'),
            c_thresh = config['parameters']['connectivity'].get('c_thresh'),
            loop_check = config['parameters']['connectivity'].get('loop_check'),
            cubic_transform = config['parameters']['connectivity'].get('cubic_transform', False),
            pca_transform = config['parameters']['connectivity'].get('pca_transform', False),
            wait_for_file = config['parameters']['connectivity'].get('wait_for_file', 240),
            cleanup_fsl = config['parameters']['connectivity'].get('cleanup_fsl', True)
        script: 'scripts/01_connectivity.py'


rule participant_level_clustering:
    input: rules.connectivity.output[0]
    output: temp('clustering/clustering_k{k}_{participant_id}.npy')
    threads: 1
    resources: mem_mb=2000
    params:
        algorithm = config['parameters']['clustering']['algorithm'],
        init = config['parameters']['clustering']['init'],
        max_iter = config['parameters']['clustering']['max_iter'],
        n_clusters = lambda wildcards: int(wildcards.k),
        n_init = config['parameters']['clustering']['n_init']
    script: 'scripts/02_participant_level_clustering.py'


rule group_level_clustering:
    input:
        seed_img = 'seed_mask.nii',
        participants = 'participants.tsv',
        labels = expand(rules.participant_level_clustering.output[0], participant_id=participants, k='{k}')
    output:
        group_labels = 'clustering/clustering_group_k{k}.npz',
        group_img = 'summary/niftis/group_clustering_k{k}.nii'
    threads: 1
    resources: mem_mb=2000
    params:
        modality = config['project']['modality'],
        linkage = config['parameters']['clustering']['linkage'],
        method = config['parameters']['clustering']['group_method']
    script: 'scripts/03_group_level_clustering.py'


rule internal_validity:
    input:
        connectivity = rules.connectivity.output[0],
        labels = expand(rules.participant_level_clustering.output[0], k=k, participant_id='{participant_id}')
    output: temp('validity/internal-validity_{participant_id}.tsv')
    threads: 1
    resources: mem_mb=2000
    params: metrics = config['parameters']['clustering']['internal_validity_metrics']
    script: 'scripts/04_internal_validity.py'


rule summary_internal_validity:
    input:
        participants = 'participants.tsv',
        validity = expand(rules.internal_validity.output[0], participant_id=participants, k=k)
    output:
        table = 'summary/internal_validity.tsv',
        figure = 'summary/figures/internal_validity.{ext}'.format(ext=ext)
    params:
        internal_validity_metrics = config['parameters']['clustering']['internal_validity_metrics'],
        figure_format = ext
    threads: 1
    script: 'scripts/05_summary_internal_validity.py'


rule individual_similarity:
    input:
        labels = rules.group_level_clustering.output.group_labels
    output:
        matrix = 'summary/individual_similarity_{k}_clusters.npy',
        figure1 = 'summary/figures/individual_similarity_{{k}}clusters_unordered.{ext}'.format(ext=ext),
        figure2 = 'summary/figures/individual_similarity_{{k}}clusters_ordered.{ext}'.format(ext=ext)
    threads: 1
    params: metric = config['parameters']['clustering']['similarity_metric'], figure_format = ext
    script: 'scripts/06_individual_similarity.py'


rule group_similarity:
    input:
        participants = 'participants.tsv',
        labels = expand(rules.group_level_clustering.output.group_labels, k=k)
    output:
        table1 = 'summary/group_similarity.tsv',
        table2 = 'summary/cophenetic_correlation.tsv',
        figure1 = 'summary/figures/group_similarity.{ext}'.format(ext=ext),
        figure2 = 'summary/figures/relabel_accuracy.{ext}'.format(ext=ext),
        figure3 = 'summary/figures/cophenetic_correlation.{ext}'.format(ext=ext)
    threads: 1
    params: metric = config['parameters']['clustering']['similarity_metric'], figure_format = ext
    script: 'scripts/07_group_similarity.py'
